rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function participantInEvent(eventId) {
      return exists(/databases/$(database)/documents/events/$(eventId)/participants/$(request.auth.uid));
    }

    function participantIsHost(eventId) {
      return get(/databases/$(database)/documents/events/$(eventId)/participants/$(request.auth.uid)).data.role == 'host';
    }

    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for friend discovery
    }
    
    // Users collection - contacts sub-collection
    match /users/{userId}/contacts/{contactId} {
      // The owner of the user document can manage their contacts list
      // Read: Only the owner can read their contacts list
      // Write/Delete: Only the owner can create or remove contacts
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    /**
     * EVENTS COLLECTION
     * -----------------
     * • Any authenticated user can create an event (they become host).
     * • Events can be read if user is a participant OR for join code lookup queries.
     * • Only the host can update or delete the event document.
     */
    match /events/{eventId} {
      allow create: if request.auth != null;
      // Allow reading if user is participant OR for any authenticated user (needed for join code lookup)
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.hostUid;

      // Participants sub-collection
      match /participants/{participantId} {
        // Allow any authenticated participant in the event to read the hosts/participants list
        allow read: if request.auth != null && participantInEvent(eventId);

        // A user can create their own participant doc (joining) or host can add others
        allow create: if request.auth != null && (
          request.auth.uid == participantId || participantIsHost(eventId)
        );

        // Allow updates to the participant role (e.g., guest promoted to host)
        // The participant themselves can change their role to "host" using a valid host code
        // Hosts can also update participant roles
        allow update: if request.auth != null && (
          request.auth.uid == participantId || participantIsHost(eventId)
        );

        // Participant can delete themselves (leave event) or host can remove
        allow delete: if request.auth != null && (
          request.auth.uid == participantId || participantIsHost(eventId)
        );
      }
    }
    
    // Snaps collection - readable by sender and recipient only
    match /snaps/{snapId} {
      allow read: if request.auth != null && participantInEvent(resource.data.eventId);
      // Only event hosts may create snaps
      allow create: if request.auth != null && participantIsHost(request.resource.data.eventId);
      allow delete: if request.auth != null && participantIsHost(resource.data.eventId);
    }
    
    // Stories collection
    // Event participants can read; only hosts can create/delete.
    // Any authenticated user can update *only* the viewedBy array to include their UID.
    match /stories/{storyId} {
      allow read: if request.auth != null && participantInEvent(resource.data.eventId);

      // Create — only hosts may post stories
      allow create: if request.auth != null && participantIsHost(request.resource.data.eventId);

      // Delete — only hosts may delete stories
      allow delete: if request.auth != null && participantIsHost(resource.data.eventId);

      // Update — allow two cases:
      //  1) Owner updating any fields
      //  2) Any authenticated user adding themselves to viewedBy using arrayUnion and NOT modifying other fields
      allow update: if request.auth != null && (
        // Host can always update
        participantIsHost(resource.data.eventId) ||

        // Non-owner: only allowed if the diff is exactly adding their UID to viewedBy
        (
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.imageUrl == resource.data.imageUrl &&
          request.resource.data.imagePath == resource.data.imagePath &&
          request.resource.data.timestamp == resource.data.timestamp &&
          request.resource.data.expiresAt == resource.data.expiresAt &&
          request.resource.data.metadata == resource.data.metadata &&
          // viewedBy length increases by 1 and contains auth.uid
          request.resource.data.viewedBy.size() == resource.data.viewedBy.size() + 1 &&
          request.auth.uid in request.resource.data.viewedBy
        )
      );
    }
    
    // Chat metadata collection (for chat list)
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
    }
  }
}
