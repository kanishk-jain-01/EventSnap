rules_version = '2';

// Firebase Storage Security Rules for Snapchat Clone MVP
// Enhanced rules with comprehensive security for snaps, stories, and avatars
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidImageSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidSnapSize() {
      return request.resource.size < 5 * 1024 * 1024; // 5MB limit for snaps
    }
    
    function isValidAvatarSize() {
      return request.resource.size < 2 * 1024 * 1024; // 2MB limit for avatars
    }

    // Cross-service Firestore lookups are disabled for MVP to avoid permission issues.
    // Instead, rely on custom metadata we attach during upload.

    // Uploader consistency â€‘ ensures the client-provided metadata.uploaderId matches the authenticated UID.
    function isUploader() {
      return request.resource.metadata.uploaderId == request.auth.uid;
    }
    
    // Snaps - Ephemeral photo messages between users
    match /snaps/{userId}/{snapId} {
      // Users can upload snaps to their own folder
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageType() && 
                      isValidSnapSize();
      
      // Snaps can be read by authenticated users (recipient will be validated in Firestore)
      allow read: if isAuthenticated();
      
      // Allow deletion for cleanup (by owner or system)
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Stories - 24-hour ephemeral content visible to contacts
    match /stories/{userId}/{storyId} {
      // Users can upload stories to their own folder
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageType() && 
                      isValidSnapSize();
      
      // Stories can be read by authenticated users (visibility controlled in Firestore)
      allow read: if isAuthenticated();
      
      // Allow deletion for cleanup and user management
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // User avatars - Profile pictures
    match /avatars/{userId}/{avatarId} {
      // Users can upload avatars to their own folder
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageType() && 
                      isValidAvatarSize();
      
      // Avatars can be read by all authenticated users
      allow read: if isAuthenticated();
      
      // Users can delete their own avatars
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Thumbnails - Optimized versions of images
    match /thumbnails/{userId}/{imageType}/{imageId} {
      // Users can upload thumbnails to their own folder
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageType() && 
                      isValidAvatarSize(); // Thumbnails should be small
      
      // Thumbnails can be read by authenticated users
      allow read: if isAuthenticated();
      
      // Allow deletion for cleanup
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Temporary uploads - For processing before moving to final location
    match /temp/{userId}/{allPaths=**} {
      // Users can upload to their temp folder
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageType() && 
                      isValidImageSize();
      
      // Only owner can read temp files
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow deletion for cleanup
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Event Documents (PDFs & images uploaded by hosts)
    match /events/{eventId}/docs/{docId} {
      // Upload / delete permitted when the uploader metadata matches the requester.
      allow write, delete: if isAuthenticated() && isUploader() && (
        // Accept PDFs or images only
        (request.resource.contentType.matches('image/.*') || request.resource.contentType.matches('application/pdf.*')) &&
        request.resource.size < 20 * 1024 * 1024 // 20MB limit
      );

      // Any authenticated user can read. (Event membership enforced at Firestore layer.)
      allow read: if isAuthenticated();
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
